{"version":3,"file":"size_measuring.js","mappings":"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","sources":["webpack://sms-href/./lib/mixed/constants.js","webpack://sms-href/./lib/mixed/helpers.js","webpack://sms-href/./demo/src/size_measuring.js","webpack://sms-href/./lib/class/sms-href.js"],"sourcesContent":["///////////\n// RESULT CODES\n///////////\n/**\n * @description Code for status - `OK`\n */\nexport const CODE_SUCCESS = 200;\n/**\n * @description Code for status - `Not Found`\n */\nexport const CODE_NOT_FOUND = 404;\n/**\n * @description Code for status - `Not Implemented`\n */\nexport const CODE_UNSUPPORTED_OS = 501;\n///////////\n// CONTENT BODY SEPARATORS\n///////////\n/**\n * @description Body separator for Android platform\n * @see https://stackoverflow.com/a/19126326\n *\n * @default ?\n */\nexport const ANDROID_SEPARATOR = '?';\n/**\n * @description Body separator for IOS platform version 7 and lower\n * @see https://stackoverflow.com/a/19126326\n *\n * @default ;\n */\nexport const IOS_7_AND_LOWER_SEPARATOR = ';';\n/**\n * @description Body separator for IOS platform version 8 and higher\n * @see https://stackoverflow.com/a/19126326\n *\n * @default &\n */\nexport const IOS_8_AND_HIGHER_SEPARATOR = '&';\n///////////\n// IOS MIN VERSION\n///////////\n/**\n * @description **`iOS7`** allegedly doesn't support **`sms:`** href links.\n *\n * @default 7\n */\nexport const MIN_IOS_VERSION = 7;\n///////////\n// PROTOCOL CONSTANTS\n///////////\nexport const PROTOCOL = 'sms:';\nexport const PROTOCOL_REGEX = /^sms:/i;\nexport const BODY = 'body=';\nexport const BODY_REGEX = /.body=/i;\n//# sourceMappingURL=constants.js.map","/**\n * @description Check if value is an object (Object | Array)\n *\n * @param value\n */\nexport const isObject = (value) => {\n    return typeof value !== null && typeof value === 'object';\n};\n/**\n * @description Merges two objects\n *\n * @param target Will be updated\n * @param source Object with update data\n */\nexport const merge = (target, source) => {\n    if (!isObject(target) || !isObject(source))\n        return;\n    for (const key in source) {\n        const value = source[key];\n        if (isObject(value))\n            merge(target[key], value);\n        else\n            target[key] = value;\n    }\n};\n//# sourceMappingURL=helpers.js.map","////////////\n// DO NOT EDIT THIS FILE\n////////////\n// This file is only for minimal build size measuring\nimport {SmsHref} from \"../../lib\";\n\nconst smsHref = new SmsHref();\nsmsHref.fixAll().catch();\n","import { PROTOCOL, CODE_SUCCESS, CODE_NOT_FOUND, PROTOCOL_REGEX, MIN_IOS_VERSION, BODY, BODY_REGEX, ANDROID_SEPARATOR, CODE_UNSUPPORTED_OS, IOS_7_AND_LOWER_SEPARATOR, IOS_8_AND_HIGHER_SEPARATOR, } from \"../mixed/constants\";\nimport { merge } from \"../mixed/helpers\";\nexport class SmsHref {\n    /**\n     * @param [options] _[optional]_ Configuration of custom separator and allowed devices.\n     *                  Read documentation for more information.\n     */\n    constructor(options) {\n        /**\n         * @private\n         * @readonly\n         */\n        this._options = {\n            allow: {\n                mobile: true,\n                tablet: true,\n                facebook: true\n            },\n            separator: null,\n            encode: true\n        };\n        /**\n         * @private\n         * @readonly\n         */\n        this._separator = null;\n        merge(this._options, options);\n        this._separator = this._getSeparator();\n    }\n    /**\n     * @description Finds and update all anchor links with `sms:` protocol value\n     *              by current platform in set `DOM` context.\n     *\n     * @param [context] _[optional]_ - Defines parent `DOM` node for search [default - `document`]\n     *\n     * @returns - Promise<ResultCode>\n     * @throws - Promise.catch<ResultCode>\n     */\n    fixAll(context = document) {\n        return new Promise((resolve, reject) => {\n            // Separator was not set\n            if (!this._separator)\n                return reject(CODE_UNSUPPORTED_OS);\n            const elements = context?.querySelectorAll(`a[href^=\"${PROTOCOL}\"]`);\n            // Anchors with sms: href doesn't exist\n            if (!elements?.length)\n                return reject(CODE_NOT_FOUND);\n            elements.forEach(async (element) => {\n                const content = element.href.replace(PROTOCOL_REGEX, '')?.trim();\n                // sms: content is empty\n                if (!content)\n                    return;\n                element.href = await this.fixValue(content, this._options.encode);\n            });\n            // All sms: href anchors was updated\n            resolve(CODE_SUCCESS);\n        });\n    }\n    /**\n     * @description Update input string value by current platform.\n     *\n     * @param smsValue Input string for update\n     * @param [encode] _[optional]_ - Enable/Disable message text encoding ( e.g., `encodeURIComponent` )\n     *\n     * @returns Valid SMS Href `sms:`anchor string\n     */\n    async fixValue(smsValue, encode) {\n        if (typeof this._separator !== 'string' || !BODY_REGEX.test(smsValue))\n            return smsValue;\n        if (typeof encode !== \"boolean\")\n            encode = this._options.encode;\n        if (encode)\n            smsValue = this._encode(smsValue);\n        const protocol = PROTOCOL_REGEX.test(smsValue) ? '' : PROTOCOL;\n        return protocol + smsValue\n            ?.replace(/&amp;/gi, '&')\n            .replace(BODY_REGEX, this._separator + BODY);\n    }\n    /**\n     * @description Creates `sms:` href string from phone number and sms message text\n     *\n     * @param smsConfiguration\n     * @param [encode] _[optional]_ - Enable/Disable message text encoding ( e.g., `encodeURIComponent` )\n     *\n     * @returns Valid SMS Href `sms:`anchor string\n     * @throws - Promise.reject<TypeError> - If `phone` and `message` are both not provided\n     */\n    async create(smsConfiguration, encode) {\n        const phone = smsConfiguration?.phone?.toString().trim();\n        const message = smsConfiguration?.message?.trim();\n        if (!phone && !message)\n            throw new TypeError('Phone number or message must be provided.');\n        let smsValue = '';\n        if (!!phone)\n            smsValue += phone;\n        if (!!message)\n            smsValue += ANDROID_SEPARATOR + BODY + message;\n        return this.fixValue(smsValue, encode);\n    }\n    /**\n     * @description IOS platform detection\n     *\n     * @returns IOS major version or `-1` if it's not IOS\n     * @private\n     */\n    _isIOS(UA) {\n        const version = UA\n            .match(/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i)?.[1]\n            ?.replace('undefined', '3_2')\n            .replace('_', '.')\n            .replace('_', '');\n        if (!version || isNaN(+version))\n            return -1;\n        const majorVersion = parseInt(version);\n        const isTablet = /ipad/i.test(UA);\n        return this._getResultByAllowedDevice(majorVersion, isTablet);\n    }\n    /**\n     * @description Android platform detection\n     *\n     * @returns `1` for Android or `-1` if it's not Android\n     * @private\n     */\n    _isAndroid(UA) {\n        if (!/android/i.test(UA))\n            return -1;\n        const result = 1;\n        const isTablet = !/mobile/i.test(UA);\n        return this._getResultByAllowedDevice(result, isTablet);\n    }\n    /**\n     * @description Facebook APP web view detection\n     *\n     * @returns `1` for facebook app web view or `-1` if it's not.\n     * @private\n     */\n    _isFacebookApp(UA) {\n        return /fba[nv]/gi.test(UA) ? 1 : -1;\n    }\n    /**\n     * @private\n     */\n    _encode(smsString) {\n        if (smsString.search(BODY) < BODY.length)\n            return smsString;\n        const pieces = smsString.split(BODY);\n        return pieces.shift() + BODY + encodeURIComponent(decodeURIComponent(pieces.join(BODY)));\n    }\n    /**\n     * @private\n     */\n    _getResultByAllowedDevice(result, isTablet) {\n        const allow = this._options.allow;\n        // Mobile only\n        if (allow.mobile && !allow.tablet)\n            return isTablet ? -1 : result;\n        // Tablet only\n        if (allow.tablet && !allow.mobile)\n            return isTablet ? result : -1;\n        return result;\n    }\n    /**\n     * @private\n     */\n    _getSeparator() {\n        const options = this._options;\n        // Custom defined separator\n        if (!!options.separator?.trim())\n            return options.separator;\n        const UA = navigator.userAgent;\n        // Facebook app web view\n        if (!options.allow?.facebook && this._isFacebookApp(UA) > 0)\n            return null;\n        // Platform detection\n        if (this._isAndroid(UA) > 0)\n            return ANDROID_SEPARATOR;\n        const ios = this._isIOS(UA);\n        if (ios > 0)\n            return ios <= MIN_IOS_VERSION ? IOS_7_AND_LOWER_SEPARATOR : IOS_8_AND_HIGHER_SEPARATOR;\n        return null;\n    }\n}\n//# sourceMappingURL=sms-href.js.map"],"names":["PROTOCOL","PROTOCOL_REGEX","BODY","BODY_REGEX","isObject","value","merge","target","source","key","constructor","options","this","_options","allow","mobile","tablet","facebook","separator","encode","_separator","_getSeparator","fixAll","context","document","Promise","resolve","reject","elements","querySelectorAll","length","forEach","async","element","content","href","replace","trim","fixValue","smsValue","test","_encode","smsConfiguration","phone","toString","message","TypeError","_isIOS","UA","version","match","isNaN","majorVersion","parseInt","isTablet","_getResultByAllowedDevice","_isAndroid","_isFacebookApp","smsString","search","pieces","split","shift","encodeURIComponent","decodeURIComponent","join","result","navigator","userAgent","ios","catch"],"sourceRoot":""}