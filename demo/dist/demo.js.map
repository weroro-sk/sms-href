{"version":3,"file":"demo.js","mappings":"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","sources":["webpack://sms-href/./lib/mixed/constants.js","webpack://sms-href/./demo/src/index.js","webpack://sms-href/./lib/class/sms-href.js"],"sourcesContent":["///////////\n// RESULT CODES\n///////////\n/**\n * @description Code for status - `OK`\n */\nexport const CODE_SUCCESS = 200;\n/**\n * @description Code for status - `Not Found`\n */\nexport const CODE_NOT_FOUND = 404;\n/**\n * @description Code for status - `Not Implemented`\n */\nexport const CODE_UNSUPPORTED_OS = 501;\n///////////\n// CONTENT BODY SEPARATORS\n///////////\n/**\n * @description Body separator for Android platform\n * @see https://stackoverflow.com/a/19126326\n */\nexport const ANDROID_SEPARATOR = '?';\n/**\n * @description Body separator for IOS platform version 7 and lower\n * @see https://stackoverflow.com/a/19126326\n */\nexport const IOS_7_AND_LOWER_SEPARATOR = ';';\n/**\n * @description Body separator for IOS platform version 8 and higher\n * @see https://stackoverflow.com/a/19126326\n */\nexport const IOS_8_AND_HIGHER_SEPARATOR = '&';\n///////////\n// IOS MIN VERSION\n///////////\n/**\n * @description **`iOS7`** allegedly doesn't support **`sms:`** href links.\n */\nexport const MIN_IOS_VERSION = 7;\n///////////\n// PROTOCOL CONSTANTS\n///////////\nexport const PROTOCOL = 'sms:';\nexport const PROTOCOL_REGEX = /^sms:/i;\nexport const BODY = 'body=';\nexport const BODY_REGEX = /.body=/i;\n//# sourceMappingURL=constants.js.map","/////////////////////\n/*************************\n * Run `npm run build` before editing this file\n **************************/\n/////////////////////\nimport {CODE_NOT_FOUND, CODE_SUCCESS, CODE_UNSUPPORTED_OS, SmsHref} from \"../../lib\";\n\nconst smsHref = new SmsHref();\n\n////////////\n// FIX ALL SMS HREF LINKS\n////////////\n\nsmsHref.fixAll()\n    .then((resultCode) => {\n        /** @type {HTMLElement} */\n        const info = document.querySelector('.info');\n        switch (resultCode) {\n            case CODE_SUCCESS:\n                info.classList.add('bg-success');\n                info.textContent = 'All sms: href values in anchors on this webpage was updated';\n                break;\n            case CODE_NOT_FOUND:\n                info.classList.add('bg-warning');\n                info.textContent = 'Anchors with sms: href value doesn\\'t exist';\n                break;\n            case CODE_UNSUPPORTED_OS:\n                info.classList.add('bg-danger');\n                info.textContent = 'Current platform doesn\\'t support sms: href protocol';\n                break;\n        }\n    })\n    .catch(err => console.error(err.message));\n\n////////////\n// CREATE SMS HREF LINK\n////////////\n\nconst create = document.querySelector('.create');\ncreate.addEventListener('submit', (evt) => {\n    action(evt, (inputs, error) => {\n        try {\n            inputs.output.value = smsHref.create(\n                {\n                    phone: inputs.phone.value,\n                    message: inputs.message.value\n                },\n                inputs['encode-create'].checked\n            );\n        } catch (err) {\n            error.textContent = err.message;\n        }\n    });\n});\n\n////////////\n// UPDATE SMS HREF LINK TEXT\n////////////\n\nconst update = document.querySelector('.update');\nupdate.addEventListener('submit', (evt) => {\n    action(evt, (inputs, error) => {\n        try {\n            inputs.fixed.value = smsHref.fixValue(\n                inputs['sms-text'].value,\n                inputs['encode-update'].checked\n            );\n        } catch (err) {\n            error.textContent = err.message;\n        }\n    });\n});\n\n\n////////// Helpers\n\nfunction action(evt, callback) {\n    evt.preventDefault();\n\n    const form = evt.srcElement;\n    const inputs = getInputs(form);\n    const error = form.querySelector('.text-danger');\n\n    error.textContent = '';\n\n    callback?.(inputs, error);\n}\n\nfunction getInputs(form) {\n    const inputs = {}\n    for (let index = 0; index < form.length; index++) {\n        const input = form[index];\n        const id = input.id;\n        if (!!id)\n            inputs[id] = input;\n    }\n    return inputs;\n}\n","import { ANDROID_SEPARATOR, BODY, BODY_REGEX, CODE_NOT_FOUND, CODE_SUCCESS, CODE_UNSUPPORTED_OS, IOS_7_AND_LOWER_SEPARATOR, IOS_8_AND_HIGHER_SEPARATOR, MIN_IOS_VERSION, PROTOCOL, PROTOCOL_REGEX, } from \"../mixed/constants\";\nexport class SmsHref {\n    /**\n     * @param [options] _[optional]_ Configuration of custom separator and allowed devices.\n     *                  Read documentation for more information.\n     */\n    constructor(options) {\n        /**\n         * @private\n         * @readonly\n         */\n        this._options = {\n            allow: {\n                mobile: true,\n                tablet: true,\n                facebook: true\n            },\n            separator: null,\n            encode: true\n        };\n        /**\n         * @private\n         * @readonly\n         */\n        this._separator = null;\n        Object.assign(this._options, options);\n        this._separator = this._getSeparator();\n    }\n    fixAll(context = document) {\n        return new Promise((resolve, reject) => {\n            // Separator was not set\n            if (!this._separator)\n                return resolve(CODE_UNSUPPORTED_OS);\n            const elements = context.querySelectorAll(`a[href^=\"${PROTOCOL}\"]`);\n            // Anchors with sms: href doesn't exist\n            if (!elements.length)\n                return resolve(CODE_NOT_FOUND);\n            elements.forEach((element) => {\n                const content = element.href.replace(PROTOCOL_REGEX, '');\n                // sms: content is empty\n                if (!content?.trim())\n                    return;\n                try {\n                    element.href = this.fixValue(content, this._options.encode);\n                }\n                catch (err) {\n                    reject(err);\n                }\n            });\n            // All sms: href anchors was updated\n            resolve(CODE_SUCCESS);\n        });\n    }\n    fixValue(smsValue, encode) {\n        if (!smsValue?.trim())\n            throw new TypeError('SMS href text must be provided.');\n        if (typeof this._separator !== 'string' || !BODY_REGEX.test(smsValue))\n            return smsValue;\n        if (typeof encode !== \"boolean\")\n            encode = this._options.encode;\n        if (encode)\n            smsValue = this._encode(smsValue);\n        const protocol = PROTOCOL_REGEX.test(smsValue) ? '' : PROTOCOL;\n        return protocol + smsValue\n            ?.replace(/&amp;/gi, '&')\n            .replace(BODY_REGEX, this._separator + BODY);\n    }\n    create(smsConfiguration, encode) {\n        const phone = smsConfiguration?.phone?.toString().trim();\n        const message = smsConfiguration?.message?.trim();\n        if (!phone && !message)\n            throw new TypeError('Phone number or message must be provided.');\n        let smsValue = PROTOCOL;\n        if (!!phone)\n            smsValue += phone;\n        if (!!message)\n            smsValue += '@' + BODY + message;\n        return this.fixValue(smsValue, encode);\n    }\n    /**\n     * @description IOS platform detection\n     *\n     * @returns IOS major version or `-1` if it's not IOS\n     * @private\n     */\n    _isIOS(UA) {\n        const version = UA\n            .match(/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i)?.[1]\n            ?.replace('undefined', '3_2')\n            .replace('_', '.')\n            .replace('_', '');\n        if (!version || isNaN(+version))\n            return -1;\n        const majorVersion = parseInt(version);\n        const isTablet = /ipad/i.test(UA);\n        return this._getResultByAllowedDevice(majorVersion, isTablet);\n    }\n    /**\n     * @description Android platform detection\n     *\n     * @returns `1` for Android or `-1` if it's not Android\n     * @private\n     */\n    _isAndroid(UA) {\n        if (!/android/i.test(UA))\n            return -1;\n        const result = 1;\n        const isTablet = !/mobile/i.test(UA);\n        return this._getResultByAllowedDevice(result, isTablet);\n    }\n    /**\n     * @description Facebook APP web view detection\n     *\n     * @returns `TRUE` for facebook app web view or `FALSE` if it's not.\n     * @private\n     */\n    _isFacebookApp(UA) {\n        return /fba[nv]/gi.test(UA);\n    }\n    /**\n     * @private\n     */\n    _encode(smsString) {\n        if (smsString.search(BODY) < BODY.length)\n            return smsString;\n        const pieces = smsString.split(BODY);\n        return pieces.shift() + BODY + encodeURIComponent(decodeURIComponent(pieces.join(BODY)));\n    }\n    /**\n     * @private\n     */\n    _getResultByAllowedDevice(result, isTablet) {\n        const allow = this._options.allow;\n        // Mobile only\n        if (allow.mobile && !allow.tablet)\n            return isTablet ? -1 : result;\n        // Tablet only\n        if (allow.tablet && !allow.mobile)\n            return isTablet ? result : -1;\n        return result;\n    }\n    /**\n     * @private\n     */\n    _getSeparator() {\n        // Custom defined separator\n        if (!!this._options.separator?.trim())\n            return this._options.separator;\n        const UA = navigator.userAgent;\n        // Facebook app web view\n        if (!this._options.allow?.facebook && this._isFacebookApp(UA))\n            return null;\n        // Platform detection\n        if (this._isAndroid(UA) > 0)\n            return ANDROID_SEPARATOR;\n        const ios = this._isIOS(UA);\n        if (ios > 0)\n            return ios <= MIN_IOS_VERSION ? IOS_7_AND_LOWER_SEPARATOR : IOS_8_AND_HIGHER_SEPARATOR;\n        return null;\n    }\n}\n//# sourceMappingURL=sms-href.js.map"],"names":["PROTOCOL","PROTOCOL_REGEX","BODY","BODY_REGEX","smsHref","constructor","options","this","_options","allow","mobile","tablet","facebook","separator","encode","_separator","Object","assign","_getSeparator","fixAll","context","document","Promise","resolve","reject","elements","querySelectorAll","length","forEach","element","content","href","replace","trim","fixValue","err","smsValue","TypeError","test","_encode","create","smsConfiguration","phone","toString","message","_isIOS","UA","version","match","isNaN","majorVersion","parseInt","isTablet","_getResultByAllowedDevice","_isAndroid","_isFacebookApp","smsString","search","pieces","split","shift","encodeURIComponent","decodeURIComponent","join","result","navigator","userAgent","ios","then","resultCode","info","querySelector","classList","add","textContent","catch","console","error","addEventListener","evt","action","inputs","output","value","checked","callback","preventDefault","form","srcElement","index","input","id","getInputs","fixed"],"sourceRoot":""}