{"version":3,"file":"demo.js","mappings":"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","sources":["webpack://sms-href/./lib/helpers/index.js","webpack://sms-href/./lib/contants/private.contants.js","webpack://sms-href/./demo/src/index.js","webpack://sms-href/./lib/files/sms-href.js","webpack://sms-href/./lib/contants/public.constants.js"],"sourcesContent":["/**\n * @description Check if value is an object (Object | Array)\n *\n * @param value\n */\nexport const isObject = (value) => {\n    return typeof value === 'object' && value !== null;\n};\n/**\n * @description Merges two objects\n *\n * @param target Will be updated\n * @param source Object with update data\n */\nexport const objectExtend = (target, source) => {\n    if (!isObject(target) || !isObject(source))\n        return;\n    for (let key in source) {\n        const value = Reflect.get(source, key);\n        if (isObject(value))\n            objectExtend(Reflect.get(target, key), value);\n        else\n            Reflect.set(target, key, value);\n    }\n};\n//# sourceMappingURL=index.js.map","///////////\n// PROTOCOL CONSTANTS\n///////////\nexport const PROTOCOL = 'sms:';\nexport const PROTOCOL_REGEX = /^sms:/i;\nexport const BODY = 'body=';\nexport const BODY_REGEX = /.body=/i;\nexport const EMPTY = '';\nexport const AMPERSAND = '&';\nexport const QUESTION_MARK = '?';\nexport const SEMICOLON = ';';\nexport const UNDERSCORE = '_';\n//# sourceMappingURL=private.contants.js.map","/////////////////////\n/*************************\n * Run `npm run build` before editing this file\n **************************/\n/////////////////////\nimport {CODE_NOT_FOUND, CODE_SUCCESS, CODE_UNSUPPORTED_OS, SmsHref} from \"../../lib\";\n\nconst smsHref = new SmsHref();\n\n////////////\n// FIX ALL SMS HREF LINKS\n////////////\n\nsmsHref.fixAll()\n    .then((resultCode) => {\n        /** @type {HTMLElement} */\n        const info = document.querySelector('.info');\n\n        if (resultCode === CODE_SUCCESS) {\n            info.classList.add('bg-success');\n            info.textContent = 'All sms: href values in anchors on this webpage was updated';\n        }\n    })\n    .catch((errorResultCode) => {\n        /** @type {HTMLElement} */\n        const info = document.querySelector('.info');\n\n        if (errorResultCode === CODE_NOT_FOUND) {\n            info.classList.add('bg-warning');\n            info.textContent = 'Anchors with sms: href value doesn\\'t exist';\n\n        } else if (errorResultCode === CODE_UNSUPPORTED_OS) {\n            info.classList.add('bg-danger');\n            info.textContent = 'Current platform doesn\\'t support sms: href protocol';\n        }\n    });\n\n////////////\n// CREATE SMS HREF LINK\n////////////\n\nconst create = document.querySelector('.create');\ncreate.addEventListener('submit', (evt) => {\n    action(evt, async (inputs, error) => {\n        smsHref.create(\n            {\n                phone: inputs.phone.value,\n                message: inputs.message.value\n            },\n            inputs['encode-create'].checked\n        )\n            .then((smsValue) => {\n                inputs.output.value = smsValue\n            })\n            .catch((smsHrefError) => {\n                error.textContent = smsHrefError.message;\n            });\n    });\n});\n\n////////////\n// UPDATE SMS HREF LINK TEXT\n////////////\n\nconst update = document.querySelector('.update');\nupdate.addEventListener('submit', (evt) => {\n    action(evt, async (inputs, error) => {\n        inputs.fixed.value = await smsHref.fixValue(\n            inputs['sms-text'].value,\n            inputs['encode-update'].checked\n        );\n    });\n});\n\n\n////////// Helpers\n\nfunction action(evt, callback) {\n    evt.preventDefault();\n\n    const form = evt.srcElement;\n    const inputs = getInputs(form);\n    const error = form.querySelector('.text-danger');\n\n    error.textContent = '';\n\n    callback?.(inputs, error);\n}\n\nfunction getInputs(form) {\n    const inputs = {}\n    for (let index = 0; index < form.length; index++) {\n        const input = form[index];\n        const id = input.id;\n        if (!!id)\n            inputs[id] = input;\n    }\n    return inputs;\n}\n","import { objectExtend } from \"../helpers\";\nimport { PROTOCOL, PROTOCOL_REGEX, BODY, BODY_REGEX, AMPERSAND, EMPTY, UNDERSCORE } from \"../contants/private.contants\";\nimport { MIN_IOS_VERSION, CODE_SUCCESS, CODE_NOT_FOUND, CODE_UNSUPPORTED_OS, ANDROID_SEPARATOR, IOS_7_AND_LOWER_SEPARATOR, IOS_8_AND_HIGHER_SEPARATOR } from \"../contants/public.constants\";\nexport class SmsHref {\n    /**\n     * @param [options] _[optional]_ Configuration of custom separator and allowed devices.\n     *                  Read documentation for more information.\n     */\n    constructor(options) {\n        /**\n         * @private\n         * @readonly\n         */\n        this._options = {\n            allow: {\n                mobile: true,\n                tablet: true,\n                facebook: true\n            },\n            separator: null,\n            encode: true\n        };\n        /**\n         * @private\n         * @readonly\n         */\n        this._separator = null;\n        objectExtend(this._options, options);\n        this._separator = this._getSeparator();\n    }\n    /**\n     * @description Finds and update all anchor links with `sms:` protocol value\n     *              by current platform in set `DOM` context.\n     *\n     * @param [context=document] Defines parent `DOM` node for search [default - `document`]\n     *\n     * @returns - Promise<ResultCode>\n     * @throws - Promise.catch<ResultCode>\n     */\n    fixAll(context = document) {\n        return new Promise((resolve, reject) => {\n            // Separator was not set\n            if (!this._separator)\n                return reject(CODE_UNSUPPORTED_OS);\n            const elements = context?.querySelectorAll(`a[href^=\"${PROTOCOL}\"]`);\n            // Anchors with sms: href doesn't exist\n            if (!elements?.length)\n                return reject(CODE_NOT_FOUND);\n            elements.forEach(async (element) => {\n                const content = element.href.replace(PROTOCOL_REGEX, EMPTY)?.trim();\n                // sms: content is empty\n                if (!content)\n                    return;\n                element.href = await this.fixValue(content, this._options.encode);\n            });\n            // All sms: href anchors was updated\n            resolve(CODE_SUCCESS);\n        });\n    }\n    /**\n     * @description Update input string value by current platform.\n     *\n     * @param smsValue Input string for update\n     * @param [encode=false] Enable/Disable message text encoding ( e.g., `encodeURIComponent` )\n     *\n     * @returns Valid SMS Href `sms:`anchor string\n     */\n    async fixValue(smsValue, encode) {\n        // If the sms value doesn't contain body= we don't need to fix it.\n        if (typeof this._separator !== 'string' || !BODY_REGEX.test(smsValue))\n            return smsValue;\n        if (typeof encode !== \"boolean\")\n            encode = this._options.encode;\n        if (encode)\n            smsValue = this._encode(smsValue);\n        const protocol = PROTOCOL_REGEX.test(smsValue) ? EMPTY : PROTOCOL;\n        return protocol + smsValue\n            ?.replace(/&amp;/gi, AMPERSAND)\n            ?.replace(BODY_REGEX, this._separator + BODY);\n    }\n    /**\n     * @description Creates an `sms:` href string from the phone number and text of the sms message\n     *\n     * @param smsConfiguration  The Sms Href message configuration object that contains\n     *                          the phone number and the sms message. `{phone: 1234, message: 'sms message'}`\n     * @param [encode=false] Enable/Disable message text encoding ( e.g., `encodeURIComponent` )\n     *\n     * @returns Valid SMS Href `sms:`anchor string\n     * @throws - Promise.reject<TypeError> - If `phone` and `message` are both not provided\n     */\n    async create(smsConfiguration, encode) {\n        const phone = smsConfiguration?.phone?.toString().trim();\n        const message = smsConfiguration?.message?.trim();\n        if (!phone && !message)\n            throw new TypeError('Phone number or message must be provided.');\n        // We don't need the predefined sms: protocol\n        // because it will be embedded in the fixValue() method.\n        let smsValue = EMPTY;\n        if (!!phone)\n            smsValue += phone;\n        if (!!message)\n            smsValue += ANDROID_SEPARATOR + BODY + message;\n        return this.fixValue(smsValue, encode);\n    }\n    /**\n     * @description IOS platform detection\n     *\n     * @returns IOS major version or `-1` if it's not IOS\n     * @private\n     */\n    _isIOS(UA) {\n        const version = UA\n            .match(/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i)?.[1]\n            ?.replace('undefined', '3_2')\n            .replace(UNDERSCORE, '.')\n            .replace(UNDERSCORE, EMPTY);\n        if (!version || isNaN(+version))\n            return -1;\n        const majorVersion = parseInt(version);\n        const isTablet = /ipad/i.test(UA);\n        return this._getResultByAllowedDevice(majorVersion, isTablet);\n    }\n    /**\n     * @description Android platform detection\n     *\n     * @returns `1` for Android or `-1` if it's not Android\n     * @private\n     */\n    _isAndroid(UA) {\n        if (!/android/i.test(UA))\n            return -1;\n        const result = 1;\n        const isTablet = !/mobile/i.test(UA);\n        return this._getResultByAllowedDevice(result, isTablet);\n    }\n    /**\n     * @description Facebook APP web view detection\n     *\n     * @returns `1` for facebook app web view or `-1` if it's not.\n     * @private\n     */\n    _isFacebookApp(UA) {\n        return /fba[nv]/gi.test(UA) ? 1 : -1;\n    }\n    /**\n     * @private\n     */\n    _encode(smsString) {\n        if (smsString.search(BODY) < BODY.length)\n            return smsString;\n        const pieces = smsString.split(BODY);\n        return pieces.shift() + BODY + encodeURIComponent(decodeURIComponent(pieces.join(BODY)));\n    }\n    /**\n     * @private\n     */\n    _getResultByAllowedDevice(result, isTablet) {\n        const allow = this._options.allow;\n        // Mobile only\n        if (allow.mobile && !allow.tablet)\n            return isTablet ? -1 : result;\n        // Tablet only\n        if (allow.tablet && !allow.mobile)\n            return isTablet ? result : -1;\n        return result;\n    }\n    /**\n     * @private\n     */\n    _getSeparator() {\n        const options = this._options;\n        // Custom defined separator\n        if (!!options.separator?.trim())\n            return options.separator;\n        const UA = navigator.userAgent;\n        // Facebook app web view\n        if (!options.allow?.facebook && this._isFacebookApp(UA) > 0)\n            return null;\n        // Platform detection\n        if (this._isAndroid(UA) > 0)\n            return ANDROID_SEPARATOR;\n        const ios = this._isIOS(UA);\n        if (ios > 0)\n            return ios <= MIN_IOS_VERSION\n                ? IOS_7_AND_LOWER_SEPARATOR\n                : IOS_8_AND_HIGHER_SEPARATOR;\n        return null;\n    }\n}\n//# sourceMappingURL=sms-href.js.map","import { AMPERSAND, QUESTION_MARK, SEMICOLON } from \"./private.contants\";\n///////////\n// RESULT CODES\n///////////\n/**\n * @description Code for status - `OK`\n */\nexport const CODE_SUCCESS = 200;\n/**\n * @description Code for status - `Not Found`\n */\nexport const CODE_NOT_FOUND = 404;\n/**\n * @description Code for status - `Not Implemented`\n */\nexport const CODE_UNSUPPORTED_OS = 501;\n///////////\n// CONTENT BODY SEPARATORS\n///////////\n/**\n * @description Body separator for Android platform\n * @see https://stackoverflow.com/a/19126326\n *\n * @default ?\n */\nexport const ANDROID_SEPARATOR = QUESTION_MARK;\n/**\n * @description Body separator for IOS platform version 7 and lower\n * @see https://stackoverflow.com/a/19126326\n *\n * @default ;\n */\nexport const IOS_7_AND_LOWER_SEPARATOR = SEMICOLON;\n/**\n * @description Body separator for IOS platform version 8 and higher\n * @see https://stackoverflow.com/a/19126326\n *\n * @default &\n */\nexport const IOS_8_AND_HIGHER_SEPARATOR = AMPERSAND;\n///////////\n// IOS MIN VERSION\n///////////\n/**\n * @description **`iOS7`** allegedly doesn't support **`sms:`** href links.\n *\n * @default 7\n */\nexport const MIN_IOS_VERSION = 7;\n//# sourceMappingURL=public.constants.js.map"],"names":["isObject","value","objectExtend","target","source","key","Reflect","get","set","PROTOCOL","PROTOCOL_REGEX","BODY","BODY_REGEX","smsHref","constructor","options","this","_options","allow","mobile","tablet","facebook","separator","encode","_separator","_getSeparator","fixAll","context","document","Promise","resolve","reject","elements","querySelectorAll","length","forEach","async","element","content","href","replace","trim","fixValue","smsValue","test","_encode","smsConfiguration","phone","toString","message","TypeError","_isIOS","UA","version","match","isNaN","majorVersion","parseInt","isTablet","_getResultByAllowedDevice","_isAndroid","_isFacebookApp","smsString","search","pieces","split","shift","encodeURIComponent","decodeURIComponent","join","result","navigator","userAgent","ios","then","resultCode","info","querySelector","classList","add","textContent","catch","errorResultCode","addEventListener","evt","action","inputs","error","create","checked","output","smsHrefError","callback","preventDefault","form","srcElement","index","input","id","getInputs","fixed"],"sourceRoot":""}